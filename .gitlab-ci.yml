stages:
  - test
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2

# Test stage
test:
  stage: test
  image: node:18-alpine
  cache:
    paths:
      - node_modules/
  script:
    - npm ci
    - npm run lint
  only:
    - merge_requests
    - main

# Build stage
build:
  stage: build
  image: node:18-alpine
  cache:
    paths:
      - node_modules/
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  only:
    - main

# Deploy to Render.com
deploy_render:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deployment to Render.com will be triggered automatically via webhook"
    - echo "Make sure to set up the webhook in Render.com dashboard"
  only:
    - main
  when: manual

# Deploy to AWS S3 + CloudFront
deploy_aws:
  stage: deploy
  image: amazon/aws-cli:latest
  script:
    - aws --version
    - aws s3 sync dist/ s3://$AWS_S3_BUCKET --delete --cache-control "public, max-age=31536000" --exclude "index.html"
    - aws s3 cp dist/index.html s3://$AWS_S3_BUCKET/index.html --cache-control "no-cache"
    - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
  variables:
    AWS_DEFAULT_REGION: us-east-1
  dependencies:
    - build
  only:
    - main
  when: manual

# Deploy to Netlify
deploy_netlify:
  stage: deploy
  image: node:18-alpine
  script:
    - npm install -g netlify-cli
    - netlify deploy --prod --dir=dist --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN
  dependencies:
    - build
  only:
    - main
  when: manual

# Deploy to Vercel
deploy_vercel:
  stage: deploy
  image: node:18-alpine
  script:
    - npm install -g vercel
    - vercel --prod --token=$VERCEL_TOKEN --confirm
  dependencies:
    - build
  only:
    - main
  when: manual

# Docker build and push
docker_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -f docker/Dockerfile -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:latest .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main